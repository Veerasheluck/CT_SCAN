# -*- coding: utf-8 -*-
"""HEALTHCARE_assignment2_CTSCAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dxcQx5nlGyFL_LtCPDYBRTaw-1QHdsu1
"""

import numpy as np
import pandas as pd
import os
for dirname, _, filenames in os.walk('/content/drive/MyDrive/HC_SEM5/dicom_dir'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

from google.colab import drive
drive.mount('/content/drive')

import matplotlib.pyplot as plt
from matplotlib import image
from PIL import Image

import skimage.io as skio
im = skio.imread("/content/drive/MyDrive/HC_SEM5/dicom_dir/ID_0004_AGE_0056_CONTRAST_1_CT.dcm")
im.shape

import matplotlib.pyplot as plt
plt.imshow(im)
plt.show()

import skimage.io as skio
im1 = skio.imread("/content/drive/MyDrive/HC_SEM5/dicom_dir/ID_0031_AGE_0039_CONTRAST_1_CT.dcm")
im1.shape

import matplotlib.pyplot as plt
plt.imshow(im1)
plt.show()

import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/HC_SEM5/overview.csv')
data.columns

import os
def Load_Images(path):
    data=[]
    for i in path:
        c=0
        im=skio.imread('/content/drive/MyDrive/HC_SEM5/tiff_images'+'/'+i)
        im=im.reshape((512,512,1))
        ar=np.array(im)/255
        data.append(ar)
    return np.array(data)

data = pd.read_csv('/content/drive/MyDrive/HC_SEM5/overview.csv')
data

x = Load_Images(data.tiff_name)
x.shape

y = data.Age
y.shape

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, shuffle = True)

from keras.models import Sequential
from keras.layers import Conv2D,Dense,Flatten,MaxPooling2D,Dropout
model = Sequential()
model.add(Conv2D(16, (7, 7), activation = 'relu', input_shape = x_train.shape[1:]))
model.add(Conv2D(32, (7, 7), activation = 'relu'))
model.add(MaxPooling2D())
model.add(Conv2D(64, (7, 7), activation = 'relu'))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(128, activation = 'relu'))
model.add(Dropout(0.2))
model.add(Dense(5, activation = 'softmax'))
model.summary()

model.compile(loss = 'mean_squared_error', optimizer = 'adam', metrics = ['mean_absolute_error'])
model.fit(x_train, y_train, epochs = 5)

model.evaluate(x_test, y_test)